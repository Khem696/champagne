# Cursor Rules for Vite + React + JavaScript + SWC Project

## Project Overview
This is a Vite-based React project using JavaScript (not TypeScript) with SWC for fast compilation. The project uses modern React patterns and follows current best practices.

## Code Style & Formatting

### JavaScript/JSX Conventions
- Use ES6+ features (arrow functions, destructuring, template literals, etc.)
- Prefer `const` over `let`, avoid `var`
- Use meaningful variable and function names
- Follow camelCase for variables and functions
- Use PascalCase for React components
- Use descriptive component names that reflect their purpose

### React Best Practices
- Use functional components with hooks instead of class components
- Prefer named exports over default exports for components
- Use React.memo() for performance optimization when needed
- Implement proper prop validation using PropTypes or JSDoc comments
- Keep components focused and single-responsibility
- Extract reusable logic into custom hooks
- Use proper dependency arrays in useEffect hooks

### File Organization
- Place components in the `src/` directory
- Use `.jsx` extension for React component files
- Use `.js` extension for utility files and non-React code
- Group related components in subdirectories when needed
- Keep component files under 200 lines when possible

### Import/Export Patterns
```javascript
// Prefer named imports/exports
import { useState, useEffect } from 'react'
export const MyComponent = () => { ... }

// Use default exports sparingly, mainly for main component files
export default App
```

## Development Guidelines

### State Management
- Use React's built-in state management (useState, useContext) for simple state
- Consider custom hooks for complex state logic
- Keep state as close to where it's used as possible
- Avoid prop drilling by using Context API when appropriate

### Performance Considerations
- Use React.memo() for expensive components
- Implement proper dependency arrays in useEffect and useCallback
- Avoid creating objects/functions in render methods
- Use lazy loading for route-based code splitting

### Error Handling
- Implement error boundaries for component error handling
- Use try-catch blocks for async operations
- Provide meaningful error messages to users
- Log errors appropriately for debugging

## Vite-Specific Guidelines

### Build Configuration
- The project uses SWC for fast compilation via `@vitejs/plugin-react-swc`
- Development server runs on the default Vite port
- Use Vite's built-in HMR (Hot Module Replacement) for development
- Leverage Vite's fast refresh for React components

### Asset Handling
- Place static assets in the `public/` directory
- Use relative imports for assets in `src/`
- Vite handles asset optimization automatically
- Use the `@` alias for src directory imports if configured

## ESLint Configuration
The project uses a modern ESLint flat config with:
- React Hooks rules enabled
- React Refresh plugin for development
- Browser globals available
- JSX support configured

## Code Quality Standards

### Comments & Documentation
- Write clear, concise comments for complex logic
- Use JSDoc comments for component props when needed
- Document custom hooks with usage examples
- Keep comments up-to-date with code changes

### Testing Considerations
- Write unit tests for utility functions
- Test component behavior, not implementation details
- Use React Testing Library for component testing
- Mock external dependencies appropriately

### Accessibility
- Use semantic HTML elements
- Include proper ARIA attributes when needed
- Ensure keyboard navigation works
- Test with screen readers when possible

## Common Patterns

### Component Structure
```javascript
import { useState, useEffect } from 'react'
import PropTypes from 'prop-types'

export const ComponentName = ({ prop1, prop2 }) => {
  const [state, setState] = useState(initialValue)
  
  useEffect(() => {
    // Side effect logic
  }, [dependencies])
  
  const handleEvent = () => {
    // Event handler logic
  }
  
  return (
    <div>
      {/* JSX content */}
    </div>
  )
}

ComponentName.propTypes = {
  prop1: PropTypes.string.isRequired,
  prop2: PropTypes.number
}
```

### Custom Hook Pattern
```javascript
export const useCustomHook = (initialValue) => {
  const [value, setValue] = useState(initialValue)
  
  const updateValue = (newValue) => {
    setValue(newValue)
  }
  
  return { value, updateValue }
}
```

## Avoid These Anti-Patterns
- Don't mutate state directly
- Avoid using index as key in lists
- Don't create components inside render methods
- Avoid deeply nested ternary operators
- Don't ignore ESLint warnings without good reason
- Avoid prop drilling beyond 2-3 levels

## Development Workflow
1. Use `npm run dev` for development
2. Use `npm run build` for production builds
3. Use `npm run lint` to check code quality
4. Use `npm run preview` to preview production build

Remember: Write code that is readable, maintainable, and follows React best practices. Prioritize clarity over cleverness. 